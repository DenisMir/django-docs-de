.. _faq-usage:

FAQ: Django benutzen
====================

Warum erscheint ein Fehler, wenn ich DJANGO_SETTINGS_MODULE importiere?
-----------------------------------------------------------------------

Du solltest sicherstellen, dass
      
    * die Umgebungsvariable ``DJANGO_SETTINGS_MODULE`` auf ein existierendes
      Python-Modul gesetzt ist (z.B. "mysite.settings")
      
    * das Modul sich im ``sys.path`` befindet (``import mysite.settings`` 
      sollte funktionieren)

    * das Modul natürlich keine Syntaxfehler enthält.

    * Falls du mod_python verwendest, aber *nicht* Djangos Request Handler, 
      musst du einen Bug in mod_python umgehen, der die Nutzung von ``SetEnv`` 
      betrifft. Bevor du irgendetwas von Django importierst, solltest du 
      Folgendes ausführen::

            os.environ.update(req.subprocess_env)

      (wobei ``req`` das mod_python Request-Objekt ist.)

Ich kann eure Template-Sprache nicht ausstehen. Muss ich sie verwenden?
-----------------------------------------------------------------------

Wir glauben, dass unsere Template Engine das Beste seit der Erfindung der
Schokolade ist, sehen aber auch ein, dass das Wählen einer Template-Sprache
einer Religion nahe kommt. Es gibt nichts in Django, dass dich dazu zwingt,
die Template-Engine zu benutzen. Wenn du also ein Anhänger von ZPT, Cheetah
oder was auch immer bist, kannst du es auch gerne verwenden.

Muss ich eure Datenmodel-/Datenbank-Abstraktionsschicht verwenden?
------------------------------------------------------------------

Nein. Wie auch das Template-System, ist die 
Datenmodel-/Datenbank-Abstraktionsschicht vom restlichen Framework unabhängig.

Es gibt allerdings eine Ausnahme: Falls du eine andere Datenbank-Bibliothek 
verwendest, kannst du nicht Djangos automatisch-generierte 
Administrationsoberfläche nutzen, da sie mit der Datenbankschicht 
verbunden ist.

Wie verwende ich Bild- und Dateifelder?
---------------------------------------

Das Verwenden eines :class:`~django.db.models.FileField` oder 
:class:`~django.db.models.ImageField` bedarf einiger Schritte:
       
    #. Setze :setting:`MEDIA_ROOT` in deiner Einstellungsdatei auf einen
       vollständigen Pfad, in dem die hochgeladenen Dateien von Django 
       gespeichert werden sollen (Aus Performancegründen werden diese 
       Dateien nicht in der Datenbank gespeichert). Setze :setting:`MEDIA_URL` 
       auf den Basispfad der öffentlichen URL dieses Verzeichnisses und 
       stelle sicher, dass das Verzeichnis für den Benutzer, unter dem der 
       Webserver läuft, beschreibbar ist.
       
    #. Füge das :class:`~django.db.models.FileField` oder das 
       :class:`~django.db.models.ImageField` zu deinem Datenmodell hinzu
       und versichere dich, dass du die 
       :attr:`~django.db.models.FileField.upload_to`-Option gesetzt hast, 
       damit Django weiß, in welches Unterverzeichnis von 
       :setting:`MEDIA_ROOT` die Dateien hochgeladen werden sollen.
       
    #. Das Einzige, was in deiner Datenbank gespeichert wird, ist der Pfad zur
       Datei (relativ von :setting:`MEDIA_ROOT`). Wir empfehlen dir, 
       Djangos komfortable :attr:`~django.core.files.File.url`-Funktion 
       zu nutzen. Wenn dein :class:`~django.db.models.ImageField` z.B. 
       ``mug_shot`` heißt, kannst du in deinem Template, die absolute URL zu 
       dem Bild mit ``{{ object.mug_shot.url }}`` ausgeben.

Wie kann ich eine Variable in all meinen Templates verwenden?
-------------------------------------------------------------

Manchmal möchtest du in all deinen Templates dieselben Variablen verwenden --
wie zum Beispiel bei globalen Menüs. Der erste Ansatz wäre hier zu versuchen,
irgendwie einen Teil des Kontext überall abzugleichen. 

Dabei hilft dir der ``RequestContext``. Mehr dazu findest du in
:ref:`subclassing-context-requestcontext`.

